        -:    0:Source:Graph_DIR/MST.cpp
        -:    1:#include <limits>
        -:    2:#include <iostream>
        -:    3:
        -:    4:#include "Graph_Builder.cpp"
        -:    5:
        -:    6:#ifndef MST_CPP
        -:    7:#define MST_CPP
        -:    8:
        -:    9:
        -:   10:/**
        -:   11: * @brief The MST class represents a minimum spanning tree of a graph.
        -:   12: *        It provides methods to analyze the MST, such as calculating
        -:   13: *        the total weight, longest path, shortest edge, and average distance.
        -:   14: */
        -:   15:
        -:   16:class MST
        -:   17:{
        -:   18:public:
        -:   19:    std::vector<Graph::Edge> mstEdges;
        -:   20:
        -:   21:    /**
        -:   22:     * Constructs an MST object using a given graph.
        -:   23:     * @param graph The graph from which the MST is derived.
        -:   24:     */
        -:   25:
    #####:   26:    MST(const Graph &graph) : originalGraph(graph) {}
        -:   27:
        -:   28:    /**
        -:   29:     * Adds an edge to the MST.
        -:   30:     * @param from Starting vertex of the edge
        -:   31:     * @param to Ending vertex of the edge
        -:   32:     * @param weight Weight of the edge
        -:   33:     */
        -:   34:
    #####:   35:    void addEdge(int from, int to, int weight)
        -:   36:    {
    #####:   37:        mstEdges.emplace_back(from, to, weight);
    #####:   38:    }
        -:   39:
        -:   40:    /**
        -:   41:     * Calculates the total weight of the minimum spanning tree.
        -:   42:     * @return The total weight of all edges in the MST.
        -:   43:     */
    #####:   44:    int getTotalWeight() const
        -:   45:    {
    #####:   46:        int total = 0;
    #####:   47:        for (const auto &edge : mstEdges)
        -:   48:        {
    #####:   49:            total += edge.weight;
        -:   50:        }
    #####:   51:        return total;
        -:   52:    }
        -:   53:    /**
        -:   54:     * Finds the longest distance in the MST using depth first search (DFS). 
        -:   55:     * @return The longest distance between any two vertices in the MST.
        -:   56:     */
    #####:   57:    int getLongestDistance() const
        -:   58:    {
    #####:   59:        return dfs(0).first;
        -:   60:    }
        -:   61:    /**
        -:   62:     * Finds the edge with the smallest weight in the MST.
        -:   63:     * @return The weight of the shortest edge in the MST.
        -:   64:     */
    #####:   65:    int getShortestEdge() const
        -:   66:    {
    #####:   67:        if (mstEdges.empty())
    #####:   68:            return 0;
    #####:   69:        return std::min_element(mstEdges.begin(), mstEdges.end(),
    #####:   70:                                [](const Graph::Edge &a, const Graph::Edge &b)
        -:   71:                                {
    #####:   72:                                    return a.weight < b.weight;
        -:   73:                                })
    #####:   74:            ->weight;
        -:   75:    }
        -:   76:    /**
        -:   77:     * Calculates the average distance between all pairs of vertices in the graph.
        -:   78:     * Uses the Floyd-Warshall algorithm to compute shortest paths.
        -:   79:     * 
        -:   80:     * @return The average distance between vertex pairs.
        -:   81:     */
    #####:   82:    double getAverageDistance() const
        -:   83:    {
    #####:   84:        int V = originalGraph.getVerticesCount();
    #####:   85:        std::vector<std::vector<int>> dist(V, std::vector<int>(V, std::numeric_limits<int>::max()));
        -:   86:
        -:   87:        // Initialize distances
    #####:   88:        for (int i = 0; i < V; ++i)
        -:   89:        {
    #####:   90:            dist[i][i] = 0;
    #####:   91:            for (const auto &edge : originalGraph.getAdjacencyList()[i])
        -:   92:            {
    #####:   93:                dist[i][edge.to] = edge.weight;
        -:   94:            }
        -:   95:        }
        -:   96:
        -:   97:        // Floyd-Warshall algorithm
    #####:   98:        for (int k = 0; k < V; ++k)
        -:   99:        {
    #####:  100:            for (int i = 0; i < V; ++i)
        -:  101:            {
    #####:  102:                for (int j = 0; j < V; ++j)
        -:  103:                {
    #####:  104:                    if (dist[i][k] != std::numeric_limits<int>::max() &&
    #####:  105:                        dist[k][j] != std::numeric_limits<int>::max() &&
    #####:  106:                        dist[i][k] + dist[k][j] < dist[i][j])
        -:  107:                    {
    #####:  108:                        dist[i][j] = dist[i][k] + dist[k][j];
        -:  109:                    }
        -:  110:                }
        -:  111:            }
        -:  112:        }
        -:  113:
        -:  114:        // Calculate average distance
    #####:  115:        long long sum = 0;
    #####:  116:        int count = 0;
    #####:  117:        for (int i = 0; i < V; ++i)
        -:  118:        {
    #####:  119:            for (int j = i + 1; j < V; ++j)
        -:  120:            {
    #####:  121:                if (dist[i][j] != std::numeric_limits<int>::max())
        -:  122:                {
    #####:  123:                    sum += dist[i][j];
    #####:  124:                    count++;
        -:  125:                }
        -:  126:            }
        -:  127:        }
    #####:  128:        return static_cast<double>(sum) / count;
    #####:  129:    }
        -:  130:
        -:  131:private:
        -:  132:    const Graph &originalGraph; ///< Reference to the original graph from which MST is derived
        -:  133:
        -:  134:    /**
        -:  135:     * Performs a depth first search (DFS) to find the path with the maximum depth in the MST.
        -:  136:     * 
        -:  137:     * @param node Current node id in the DFS
        -:  138:     * @param parent Parent node id to avoid traversing back
        -:  139:     * 
        -:  140:     * @return A pair containing the maximum depth and the farthest node id reached.
        -:  141:     */
        -:  142:
    #####:  143:    std::pair<int, int> dfs(int node, int parent = -1) const
        -:  144:    {
    #####:  145:        int maxDepth = 0;
    #####:  146:        int maxNode = node;
        -:  147:
    #####:  148:        for (const auto &edge : mstEdges)
        -:  149:        {
    #####:  150:            int nextNode = (edge.from == node) ? edge.to : (edge.to == node) ? edge.from
        -:  151:                                                                             : -1;
    #####:  152:            if (nextNode != -1 && nextNode != parent)
        -:  153:            {
    #####:  154:                auto [depth, farthestNode] = dfs(nextNode, node);
    #####:  155:                depth += edge.weight;
    #####:  156:                if (depth > maxDepth)
        -:  157:                {
    #####:  158:                    maxDepth = depth;
    #####:  159:                    maxNode = farthestNode;
        -:  160:                }
        -:  161:            }
        -:  162:        }
        -:  163:
    #####:  164:        return {maxDepth, maxNode};
        -:  165:    }
        -:  166:};
        -:  167:
        -:  168:#endif
